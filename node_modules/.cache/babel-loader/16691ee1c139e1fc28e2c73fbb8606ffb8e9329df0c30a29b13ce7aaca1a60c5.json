{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben Barkley\\\\Desktop\\\\Gloomme\\\\MovieApp\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Navigate, useHistory, useNavigate, useParams } from \"react-router-dom\";\nimport \"./moviegrid.css\";\nimport MovieCard from \"../movie-card/MovieCard\";\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\nimport Input from \"../input/Input\";\nimport Button, { OutlineButton } from \"../button/Button\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieGrid = props => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      if (keyword === undefined) {\n        const params = {};\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n    getList();\n  }, [props.category, keyword]);\n  const loadMore = async () => {\n    let response = null;\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search__input\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__grid-loadmore\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: loadMore,\n        className: \"loadmore-btn\",\n        children: [\"Load more \", /*#__PURE__*/_jsxDEV(\"i\", {\n          class: \"bx bx-refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n_c = MovieGrid;\nconst MovieSearch = props => {\n  _s2();\n  const history = useNavigate();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : \"\");\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      Navigate.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, Navigate]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n    document.addEventListener(\"keyup\", enterEvent);\n    return () => {\n      document.removeEventListener(\"keyup\", enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"search Movie\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: goToSearch,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"bx bx-search-alt-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s2(MovieSearch, \"Tm6DAR5757x/9/ZOeb8uhUTxWVQ=\", false, function () {\n  return [useNavigate];\n});\n_c2 = MovieSearch;\nexport default MovieGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navigate","useHistory","useNavigate","useParams","MovieCard","tmdbApi","category","movieType","tvType","Input","Button","OutlineButton","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieGrid","props","_s","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","children","className","MovieSearch","fileName","_jsxFileName","lineNumber","columnNumber","map","item","i","onClick","class","_c","_s2","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","type","placeholder","value","onChange","target","_c2","$RefreshReg$"],"sources":["C:/Users/Ben Barkley/Desktop/Gloomme/MovieApp/src/components/movie-grid/MovieGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Navigate, useHistory, useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./moviegrid.css\";\r\nimport MovieCard from \"../movie-card/MovieCard\";\r\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\r\nimport Input from \"../input/Input\";\r\nimport Button, { OutlineButton } from \"../button/Button\";\r\n\r\nconst MovieGrid = (props) => {\r\n  const [items, setItems] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPage, setTotalPage] = useState(0);\r\n  const { keyword } = useParams();\r\n\r\n  useEffect(() => {\r\n    const getList = async () => {\r\n      let response = null;\r\n      if (keyword === undefined) {\r\n        const params = {};\r\n        switch (props.category) {\r\n          case category.movie:\r\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\r\n              params,\r\n            });\r\n            break;\r\n          default:\r\n            response = await tmdbApi.getTvList(tvType.popular, { params });\r\n        }\r\n      } else {\r\n        const params = {\r\n          query: keyword,\r\n        };\r\n        response = await tmdbApi.search(props.category, { params });\r\n      }\r\n      setItems(response.results);\r\n      setTotalPage(response.total_pages);\r\n    };\r\n    getList();\r\n  }, [props.category, keyword]);\r\n\r\n  const loadMore = async () => {\r\n    let response = null;\r\n    if (keyword === undefined) {\r\n      const params = {\r\n        page: page + 1,\r\n      };\r\n      switch (props.category) {\r\n        case category.movie:\r\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\r\n            params,\r\n          });\r\n          break;\r\n        default:\r\n          response = await tmdbApi.getTvList(tvType.popular, { params });\r\n      }\r\n    } else {\r\n      const params = {\r\n        page: page + 1,\r\n        query: keyword,\r\n      };\r\n      response = await tmdbApi.search(props.category, { params });\r\n    }\r\n    setItems([...items, ...response.results]);\r\n    setPage(page + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search__input\">\r\n        <MovieSearch category={props.category} keyword={keyword} />\r\n      </div>\r\n      <div className=\"movie__grid\">\r\n        {items.map((item, i) => (\r\n          <MovieCard category={props.category} item={item} key={i} />\r\n        ))}\r\n      </div>\r\n      {page < totalPage ? (\r\n        <div className=\"movie__grid-loadmore\">\r\n          <Button onClick={loadMore} className=\"loadmore-btn\">\r\n            Load more <i class=\"bx bx-refresh\"></i>\r\n          </Button>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MovieSearch = (props) => {\r\n  const history = useNavigate();\r\n\r\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : \"\");\r\n\r\n  const goToSearch = useCallback(() => {\r\n    if (keyword.trim().length > 0) {\r\n      Navigate.push(`/${category[props.category]}/search/${keyword}`);\r\n    }\r\n  }, [keyword, props.category, Navigate]);\r\n\r\n  useEffect(() => {\r\n    const enterEvent = (e) => {\r\n      e.preventDefault();\r\n      if (e.keyCode === 13) {\r\n        goToSearch();\r\n      }\r\n    };\r\n    document.addEventListener(\"keyup\", enterEvent);\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", enterEvent);\r\n    };\r\n  }, [keyword, goToSearch]);\r\n\r\n  return (\r\n    <div className=\"movie-search\">\r\n      <Input\r\n        type=\"text\"\r\n        placeholder=\"search Movie\"\r\n        value={keyword}\r\n        onChange={(e) => setKeyword(e.target.value)}\r\n      />\r\n      <Button onClick={goToSearch}>\r\n        <i class=\"bx bx-search-alt-2\"></i>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}